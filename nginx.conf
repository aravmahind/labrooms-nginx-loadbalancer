events {
    worker_connections 1024;
}

http {
    # Set a map to determine the protocol.
    # We will assume Render/Load Balancer handles SSL termination,
    # and sets the X-Forwarded-Proto header to 'https'.
    map $http_x_forwarded_proto $ssl_protocol {
        default http;
        https https;
    }
    
    upstream main_server {
        # Using the HTTPS protocol here is often necessary if the upstream requires it,
        # but sticking to HTTP for now as Nginx is typically configured to proxy internally via HTTP.
        server main-server-8g0x.onrender.com:80; 
    }

    upstream room_servers {
        server api-node-room.onrender.com:80;
    }

    server {
        listen 80;
        listen 443 ssl; # Listen on 443 assuming Render/LoadBalancer handles the certificate setup

        # CRITICAL FIX 1: Add X-Forwarded-Proto header
        # This tells the backend servers the client used HTTPS, stopping the backend redirect loop.
        proxy_set_header X-Forwarded-Proto $ssl_protocol;
        
        # NOTE: Since Render usually handles the SSL cert, we can only add 'ssl' here
        # if the environment injects the certificates. If it doesn't work,
        # remove 'listen 443 ssl;' and rely on Render's managed HTTPS to proxy to port 80.
        
        # Socket.IO / WebSocket
        location /socket.io/ {
            proxy_pass http://main_server;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Origin $http_origin;
            proxy_redirect off;

            add_header 'Access-Control-Allow-Origin' 'https://labrooms.vercel.app' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') { return 204; }
        }

        # Rooms routes (Matches /api/v1/rooms and /rooms)
        # Using a precise match for the rooms API path to avoid ambiguity.
        # This fix is critical for both the CORS issue and potential redirect/routing issues.
        location ~ ^/api/v1/rooms/?$ {
            proxy_pass http://room_servers/api/v1/rooms;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $ssl_protocol; # Critical for room server too
            
            # Add CORS handling
            add_header 'Access-Control-Allow-Origin' 'https://labrooms.vercel.app' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            if ($request_method = 'OPTIONS') { return 204; }
        }

        # Chat
        location /chat/ {
            proxy_pass http://main_server/chat/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Other APIs - ADDED CORS/PREFLIGHT AND X-Forwarded-Proto
        location /api/v1/ {
            proxy_pass http://main_server/api/v1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $ssl_protocol; # Critical for main server too

            # ADDED CORS HEADERS AND PREFLIGHT HANDLER
            add_header 'Access-Control-Allow-Origin' 'https://labrooms.vercel.app' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') { return 204; }
        }

        # Everything else â†’ main server
        location / {
            proxy_pass http://main_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $ssl_protocol; # Critical for default route too
        }
    }
}
