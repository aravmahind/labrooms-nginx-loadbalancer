events {
    worker_connections 1024;
}

http {
    # Set a map to determine the protocol based on Render's X-Forwarded-Proto header.
    # This header is crucial for stopping the backend redirect loop.
    map $http_x_forwarded_proto $ssl_protocol {
        default http;
        https https;
    }
    
    upstream main_server {
        server main-server-8g0x.onrender.com; 
    }

    upstream room_servers {
        server api-node-room.onrender.com;
    }

    server {
        # CRITICAL FIX: Only listen on port 80 (HTTP). 
        # Render's load balancer handles the HTTPS on port 443 and forwards the traffic here.
        listen 80;

        # Add the X-Forwarded-Proto header to all proxy passes.
        # This tells your backend servers that the client's request was originally HTTPS.
        proxy_set_header X-Forwarded-Proto $ssl_protocol;
        
        # Socket.IO / WebSocket
        location /socket.io/ {
            proxy_pass http://main_server;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header Origin $http_origin;
            proxy_redirect off;

            add_header 'Access-Control-Allow-Origin' 'https://labrooms.vercel.app' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') { return 204; }
        }

        # Rooms routes (Matches /api/v1/rooms)
        location ~ ^/api/v1/rooms/?$ {
            # Correct proxy_pass for the regex location block.
            proxy_pass http://room_servers; 
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Add CORS handling
            add_header 'Access-Control-Allow-Origin' 'https://labrooms.vercel.app' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            
            if ($request_method = 'OPTIONS') { return 204; }
        }

        # Chat
        location /chat/ {
            proxy_pass http://main_server/chat/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Other APIs - ADDED CORS/PREFLIGHT
        location /api/v1/ {
            proxy_pass http://main_server/api/v1/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            # ADDED CORS HEADERS AND PREFLIGHT HANDLER
            add_header 'Access-Control-Allow-Origin' 'https://labrooms.vercel.app' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Origin, Content-Type, Accept, Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = 'OPTIONS') { return 204; }
        }

        # Everything else â†’ main server
        location / {
            proxy_pass http://main_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
    }
}
